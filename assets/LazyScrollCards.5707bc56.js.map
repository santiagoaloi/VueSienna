{"version":3,"file":"LazyScrollCards.5707bc56.js","sources":["../../src/pages/playground/projects/lazy-scroll-cards/LazyScrollCards.vue"],"sourcesContent":["<template>\n  <v-container class=\"py-3\">\n    <div class=\"display-2\">Endless scrolling with v-lazy</div>\n    <h5>\n      <span v-text=\"visibleProjects\"></span> of\n      <span>{{ projects.length }}</span> posts shown\n    </h5>\n    <v-row class=\"fill-height overflow-y-auto\" v-if=\"projects.length\">\n      <v-col\n        lg=\"3\"\n        md=\"4\"\n        sm=\"6\"\n        cols=\"12\"\n        v-for=\"(project, index) in projects\"\n      >\n        <v-sheet min-height=\"300\" class=\"fill-height\" color=\"red\">\n          <v-lazy\n            v-model=\"project.isActive\"\n            :options=\"{\n              threshold: 0.8,\n            }\"\n            class=\"fill-height\"\n          >\n            <v-card color=\"rgba(20, 20, 20, 0.8)\" class=\"fill-height\" hover>\n              <v-card-text>\n                <v-row :key=\"index\" @click=\"\">\n                  <v-col sm=\"10\" cols=\"12\" class=\"text-sm-left text-center\">\n                    #{{ index + 1 }}\n                    <h2 v-html=\"project.title\"></h2>\n                    <div v-html=\"project.subtitle\"></div>\n                  </v-col>\n                </v-row>\n              </v-card-text>\n            </v-card>\n          </v-lazy>\n        </v-sheet>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script setup>\ndefineOptions({\n  name: 'playgroundLazyScroll',\n})\n\nlet router = useRouter()\nlet allRoutes = router.getRoutes()\n\n// List all routes in @/pages/playground/*\n// exclude this SFC.\nlet routes = allRoutes.filter(\n  r => r.name?.includes('playground') && r.name !== 'playground'\n)\n\nlet visibleProjects = $computed(() => {\n  return projects.filter(project => project.isActive).length\n})\n\nlet projects = reactive(\n  routes\n    .flatMap(({ name, meta }) => {\n      let regex = /(\\w+)$/\n      let path = 'playground/projects/'\n      let fileName = name.match(regex)[1]\n\n      return [\n        {\n          prependIcon: '$mdiSpaceInvaders',\n          // Metadata custom name or extract SFC name.\n          title: meta.title || fileName,\n          get to() {\n            return `${path + fileName}`\n          },\n          subtitle: meta.description\n            ? `<span class=\"text-deep-purple-accent-1\">Ali Connors</span> &mdash; ${meta.description}`\n            : 'No description available',\n        },\n      ]\n    })\n    //Sort titles alphabetically.\n    .sort(() => -1)\n)\n</script>\n<route lang=\"yaml\">\nmeta:\n  title: Lazy scroll (cards - playground files)\n  description: Tryout of lazy loading cards.\n  icon: $mdiCardOutline\n</route>\n"],"names":["routes","useRouter","r","_a","visibleProjects","_computed","projects","project","reactive","name","meta","regex","path","fileName"],"mappings":"4nBA2CA,KAAA,sBACA,CAAA,8BAOA,IAAAA,EALAC,EAAA,EACA,UAAA,EAIA,OACAC,GAAA,OAAA,QAAAC,EAAAD,EAAA,OAAA,YAAAC,EAAA,SAAA,gBAAAD,EAAA,OAAA,aACA,EAEAE,EAAAC,EAAA,IACAC,EAAA,OAAAC,GAAAA,EAAA,QAAA,EAAA,MACA,EAEAD,EAAAE,EACAR,EACA,QAAA,CAAA,CAAA,KAAAS,EAAA,KAAAC,KAAA,CACA,IAAAC,EAAA,SACAC,EAAA,uBACAC,EAAAJ,EAAA,MAAAE,CAAA,EAAA,GAEA,MAAA,CACA,CACA,YAAA,oBAEA,MAAAD,EAAA,OAAAG,EACA,IAAA,IAAA,CACA,MAAA,GAAAD,EAAAC,GACA,EACA,SAAAH,EAAA,YACA,sEAAAA,EAAA,cACA,0BACA,CACA,CACA,CAAA,EAEA,KAAA,IAAA,EAAA,CACA"}